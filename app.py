# -*- coding: utf-8 -*-
"""Computer Security Project Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NkY5ohrqKHGoX_-y2f9l3wHOuQz5AhO-
"""

def dictionary_attack(target, wordlist_file):
    with open(wordlist_file, "r") as file:
        for password in file:
            if password.strip() == target:
                return f"‚úÖ Password found using Dictionary Attack: {password.strip()}"
    return "‚ùå Dictionary Attack failed."

# Example Usage
target_password = "iloveyou"  # Change this to test different passwords
wordlist = "/content/rockyou.txt"
print(dictionary_attack(target_password, wordlist))

import time

# Measure execution time for Dictionary Attack
start_time = time.time()
print(dictionary_attack(target_password, wordlist))
end_time = time.time()
print(f"‚è≥ Dictionary Attack Execution Time: {end_time - start_time:.4f} seconds\n")

import itertools
import string
import time

def brute_force_attack(target, max_length=6):
    chars = string.ascii_lowercase + string.digits  # Only lowercase & numbers for speed
    for length in range(1, max_length + 1):
        for attempt in itertools.product(chars, repeat=length):
            guess = ''.join(attempt)
            if guess == target:
                return f"‚úÖ Password found using Brute-Force: {guess}"
    return "‚ùå Brute-Force Attack failed."

# Example Usage
target_password = "abc123"  # Change this to test different passwords
print(brute_force_attack(target_password))

# Measure execution time for Brute-Force Attack
start_time = time.time()
print(brute_force_attack(target_password))
end_time = time.time()
print(f"‚è≥ Brute-Force Attack Execution Time: {end_time - start_time:.4f} seconds\n")

import time
def rule_based_attack(target, wordlist_file):
    with open(wordlist_file, "r") as file:
        for password in file:
            word = password.strip()
            variations = [word, word.upper(), word.lower(), word + "123", "!" + word, word + "!"]
            if target in variations:
                return f"‚úÖ Password found using Rule-Based Attack: {word}"
    return "‚ùå Rule-Based Attack failed."

# Example Usage
target_password = "password"  # Change this to test different passwords
wordlist = "/content/rockyou.txt"
print(rule_based_attack(target_password, wordlist))

# Run the attacks and store results
found_password = dictionary_attack(target_password, wordlist) or brute_force_attack(target_password) or rule_based_attack(target_password, wordlist) or hybrid_attack(target_password, wordlist)

# Check if a password was found before writing to the file
if "‚úÖ" in found_password:  # Ensures only successful results are logged
    cracked_password = found_password.split(": ")[-1]  # Extracts the password part
    with open("cracked_passwords.txt", "a") as file:
        file.write(f"Password found: {cracked_password}\n")
    print(f"Password saved: {cracked_password}")
else:
    print("No password found.")

    # Measure execution time for Rule-Based Attack
start_time = time.time()
print(rule_based_attack(target_password, wordlist))
end_time = time.time()
print(f"‚è≥ Rule-Based Attack Execution Time: {end_time - start_time:.4f} seconds\n")

# üìå Hybrid Attack (Dictionary + Brute-Force)
import itertools
import time

def hybrid_attack(target, wordlist_file):
    with open(wordlist_file, "r") as file:
        for word in file:
            word = word.strip()
            for numbers in itertools.product("0123456789", repeat=3):  # Appends 3-digit numbers
                guess = word + ''.join(numbers)
                if guess == target:
                    return f"‚úÖ Password found using Hybrid Attack: {guess}"
    return "‚ùå Hybrid Attack failed."

# Example Usage
target_password = "password123"
wordlist = "/content/rockyou.txt"
print(hybrid_attack(target_password, wordlist))

# Measure execution time for Hybrid Attack
start_time = time.time()
print(hybrid_attack(target_password, wordlist))
end_time = time.time()
print(f"‚è≥ Hybrid Attack Execution Time: {end_time - start_time:.4f} seconds\n")

def load_passwords(file_path):
    with open(file_path, 'r', encoding="ISO-8859-1") as file:
        return [line.strip() for line in file.readlines()]

!wget https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt

!ls -lh rockyou.txt

!head -n 10 rockyou.txt

import itertools
import string

# üìå Function to load RockYou.txt password list
def load_rockyou_passwords(file_path):
    with open(file_path, "r", encoding="latin-1") as file:
        return [line.strip() for line in file.readlines()]

# üìå Dictionary Attack
def dictionary_attack(target, wordlist):
    for password in wordlist:
        if password == target:
            return f"‚úÖ Password found using Dictionary Attack: {password}"
    return "‚ùå Dictionary Attack failed."

# üìå Brute-Force Attack
def brute_force_attack(target, max_length=6):
    chars = string.ascii_lowercase + string.digits  # Only lowercase & numbers for speed
    for length in range(1, max_length + 1):
        for attempt in itertools.product(chars, repeat=length):
            guess = ''.join(attempt)
            if guess == target:
                return f"‚úÖ Password found using Brute-Force: {guess}"
    return "‚ùå Brute-Force Attack failed."

# üìå Rule-Based Attack
def rule_based_attack(target, wordlist):
    for password in wordlist:
        word = password.strip()
        variations = [word, word.upper(), word.lower(), word + "123", "!" + word, word + "!"]
        if target in variations:
            return f"‚úÖ Password found using Rule-Based Attack: {word}"
    return "‚ùå Rule-Based Attack failed."

# üìå Hybrid Attack (Dictionary + Brute-Force)
def hybrid_attack(target, wordlist):
    for word in wordlist:
        for numbers in itertools.product("0123456789", repeat=3):  # Appends 3-digit numbers
            guess = word.strip() + ''.join(numbers)
            if guess == target:
                return f"‚úÖ Password found using Hybrid Attack: {guess}"
    return "‚ùå Hybrid Attack failed."

# üìå Main function to run the attacks based on user input
def password_cracker():
    # Load the RockYou.txt password list
    rockyou_file_path = '/content/rockyou.txt'  # Path for Google Colab or update accordingly
    password_list = load_rockyou_passwords(rockyou_file_path)

    # Get the target password and attack type from user input
    target_password = input("Enter the password to crack: ")
    attack_type = input("Choose attack (dictionary, brute-force, hybrid, rule-based): ").lower()

    # Run the selected attack
    if attack_type == "dictionary":
        print(dictionary_attack(target_password, password_list))
    elif attack_type == "brute-force":
        print(brute_force_attack(target_password))
    elif attack_type == "rule-based":
        print(rule_based_attack(target_password, password_list))
    elif attack_type == "hybrid":
        print(hybrid_attack(target_password, password_list))
    else:
        print("‚ùå Invalid attack type. Please choose from dictionary, brute-force, hybrid, or rule-based.")

# üìå Run the password cracker
password_cracker()